var store = [{
        "title": "What are the benefits of using SaaS over self hosted software?",
        "excerpt":"You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.   Jekyll requires blog post files to be named according to the following format:   YEAR-MONTH-DAY-title.MARKUP   Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.   Jekyll also offers powerful support for code snippets:   def print_hi(name)   puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT.  Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.   ","categories": ["Cloud"],
        "tags": [],
        "url": "https://keepaliveit.co.uk/it-consultation/cloud/benefits-of-using-saas-over-self-hosted-software/",
        "teaser":null},{
        "title": "Considerations for a Highly Available Cloud",
        "excerpt":"You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.   Jekyll requires blog post files to be named according to the following format:   YEAR-MONTH-DAY-title.MARKUP   Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.   Jekyll also offers powerful support for code snippets:   def print_hi(name)   puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT.  Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.   ","categories": ["Cloud"],
        "tags": [],
        "url": "https://keepaliveit.co.uk/it-consultation/cloud/considerations-for-a-highly-available-cloud/",
        "teaser":null},{
        "title": "Considerations for a Highly Scalable Cloud",
        "excerpt":"You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.   Jekyll requires blog post files to be named according to the following format:   YEAR-MONTH-DAY-title.MARKUP   Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.   Jekyll also offers powerful support for code snippets:   def print_hi(name)   puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT.  Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.   ","categories": ["Cloud"],
        "tags": [],
        "url": "https://keepaliveit.co.uk/it-consultation/cloud/considerations-for-a-highly-scalable-cloud/",
        "teaser":null},{
        "title": "How to move large amounts of data to the Cloud",
        "excerpt":"You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.   Jekyll requires blog post files to be named according to the following format:   YEAR-MONTH-DAY-title.MARKUP   Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.   Jekyll also offers powerful support for code snippets:   def print_hi(name)   puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT.  Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.   ","categories": ["Cloud"],
        "tags": [],
        "url": "https://keepaliveit.co.uk/it-consultation/cloud/how-to-move-large-amounts-of-data-to-the-cloud/",
        "teaser":null},{
        "title": "What is the Cloud and what can it do for me?",
        "excerpt":"You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.   Jekyll requires blog post files to be named according to the following format:   YEAR-MONTH-DAY-title.MARKUP   Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.   Jekyll also offers powerful support for code snippets:   def print_hi(name)   puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT.  Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.   ","categories": ["Cloud"],
        "tags": [],
        "url": "https://keepaliveit.co.uk/it-consultation/cloud/what-is-the-cloud-and-what-can-it-do-for-me/",
        "teaser":null},{
        "title": "What cyber security precautions should my business take?",
        "excerpt":"You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.   Jekyll requires blog post files to be named according to the following format:   YEAR-MONTH-DAY-title.MARKUP   Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.   Jekyll also offers powerful support for code snippets:   def print_hi(name)   puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT.  Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.   ","categories": ["Cyber Security"],
        "tags": [],
        "url": "https://keepaliveit.co.uk/it-consultation/cyber%20security/what-cyber-security-precautions-should-my-business-take/",
        "teaser":null},{
        "title": "Which RAID level should I choose and how much will it cost?",
        "excerpt":"RAID (redundant array of independent disks) protects against hard disk failure   RAID spreads your data across several hard drives so it can be reconstructed even if one of the drives fails. RAID should be used alongside a separate backup system.   You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.   Jekyll requires blog post files to be named according to the following format:   YEAR-MONTH-DAY-title.MARKUP   Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.   Jekyll also offers powerful support for code snippets:   def print_hi(name)   puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT.  Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.   ","categories": ["Hardware"],
        "tags": ["procurement","raid","controller","disk","storage"],
        "url": "https://keepaliveit.co.uk/it-consultation/hardware/which-raid-level-should-i-choose-and-how-much-will-it-cost/",
        "teaser":null},{
        "title": "Secure mobile devices",
        "excerpt":"You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.   Jekyll requires blog post files to be named according to the following format:   YEAR-MONTH-DAY-title.MARKUP   Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.   Jekyll also offers powerful support for code snippets:   def print_hi(name)   puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT.  Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.   ","categories": ["Cyber Security"],
        "tags": [],
        "url": "https://keepaliveit.co.uk/it-consultation/secure-mobile-devices/",
        "teaser":null},{
        "title": "Architecting software for affective logging and alerts",
        "excerpt":"Logging and alerting are two of the most effective methods for gaining insights into the performance of our applications, so implementing them in a production environment is definitely recommended.   Considerations:     Do you have enough storage to be storing a large amount of logs?   Is your infrastructure based on Cloud Computing resources? If so, have you considered the additional costs for transferring inbound and outbound data from your virtual networks?   You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.   An example of implementing logging into your application.   I’m going to demonstrate two examples   Jekyll requires blog post files to be named according to the following format:   YEAR-MONTH-DAY-title.MARKUP   Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.   Jekyll also offers powerful support for code snippets:   def print_hi(name)   puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT.  Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.   ","categories": ["Software Development"],
        "tags": ["raid","hardware"],
        "url": "https://keepaliveit.co.uk/it-consultation/software%20development/considerations-for-a-highly-available-cloud/",
        "teaser":null},{
        "title": "Modern webpage optimisation techniques for creating high performance websites",
        "excerpt":"You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.   Jekyll requires blog post files to be named according to the following format:   YEAR-MONTH-DAY-title.MARKUP   Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.   Jekyll also offers powerful support for code snippets:   def print_hi(name)   puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT.  Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.   ","categories": ["Web"],
        "tags": [],
        "url": "https://keepaliveit.co.uk/it-consultation/web/modern-webpage-optimisation-techniques/",
        "teaser":null},{
        "title": "You should be using Two-Factor Authentication. This is why.",
        "excerpt":"You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated.   Jekyll requires blog post files to be named according to the following format:   YEAR-MONTH-DAY-title.MARKUP   Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and MARKUP is the file extension representing the format used in the file. After that, include the necessary front matter. Take a look at the source for this post to get an idea about how it works.   Jekyll also offers powerful support for code snippets:   def print_hi(name)   puts \"Hi, #{name}\" end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT.  Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk.   ","categories": ["Web"],
        "tags": [],
        "url": "https://keepaliveit.co.uk/it-consultation/web/two-factor-authentication-please-start-using-it/",
        "teaser":null},{
        "title": "Keep Alive I.T’s 5 Phase API Development Process",
        "excerpt":"Creating a new website may seem like an extremely stressful task for some people but proper planning will ensure that the process goes as smoothly as possible for all parties involved. That’s why we’ve created this Website Development Process to help describe the different stages of the development process and to understand how our working relationship is effective.   Phase 1: Knowledge &amp; Requirements Gathering  During the Knowledge &amp; Requirements Gathering phase, the customer (you), and the developer (us) will discuss the mission &amp; Unique Selling Point (USP) of your business or organisation. This will help both parties identify the customer needs and create a vision of what the customer hopes to achieve with their new Website. We’ll ask you some detailed questions about what your Website needs to do during this phase so that we have all the information we need to know. This will usually involve having a meeting in person - but don’t worry about this! We’ll throw some ideas at you if you get stuck during the meeting and it won’t be formal in any way.   ##Phase 2: Layout &amp; Design Once the developer has a better understanding of the business or organisation’s requirements, the design work begins. Based on the information provided by the customer in Phase 1, the designer will create a design and send it to you for review. The design is worked on until you are 100% satisfied* and love the way it looks. Once we’re given the go ahead with our design, we’re ready to move onto Phase 3, which is the Implementation phase.   Phase 3: Implementation  Now that we have a final design and a clear picture of what the client wants, we can begin building the actual Website. The implementation phase consists of coding the required functionality of the Website, and implementing the design we came up with in Phase 2.  After this phase is complete, the Website comes to life and you can start using its features. This is the most time consuming phase of our time working together, so it may be some time before you hear back from us depending on your project size.   Phase 4: Feedback  Now that Website is ready, we want to hear your final feedback about it. If there’s anything that needs changing, we will make some last minute tweaks** to it before the Website goes ‘live’ for your company / customers/ organisation to use.   Phase 5: Launch &amp; Training  The new Website is now ready to be shown to the world! In the Launch &amp; Training phase, the website is made live for customers to see. Training is available to learn how to use the new Website. E.g. if we build you a Website which is built on a content management system, we will provide you with a short guide on how to use the system. This will allow you to update the Website’s content without knowledge of web coding.      Please ask us about our client satisfaction policy.   Software glitches (also known as bugs) may arise during the implementation phase. This can sometimes take more than just a few minutes to fix, but completely depends on the project. Please ask us about this.  ","categories": [],
        "tags": [],
        "url": "https://keepaliveit.co.uk/planning/api-development-checklist",
        "teaser":null},{
        "title": "Cloud Migration Planning Checklist",
        "excerpt":"Creating a new website may seem like an extremely stressful task for some people but proper planning will ensure that the process goes as smoothly as possible for all parties involved. That’s why we’ve created this Website Development Process to help describe the different stages of the development process and to understand how our working relationship is effective.   Phase 1: Knowledge &amp; Requirements Gathering  During the Knowledge &amp; Requirements Gathering phase, the customer (you), and the developer (us) will discuss the mission &amp; Unique Selling Point (USP) of your business or organisation. This will help both parties identify the customer needs and create a vision of what the customer hopes to achieve with their new Website. We’ll ask you some detailed questions about what your Website needs to do during this phase so that we have all the information we need to know. This will usually involve having a meeting in person - but don’t worry about this! We’ll throw some ideas at you if you get stuck during the meeting and it won’t be formal in any way.   ##Phase 2: Layout &amp; Design Once the developer has a better understanding of the business or organisation’s requirements, the design work begins. Based on the information provided by the customer in Phase 1, the designer will create a design and send it to you for review. The design is worked on until you are 100% satisfied* and love the way it looks. Once we’re given the go ahead with our design, we’re ready to move onto Phase 3, which is the Implementation phase.   Phase 3: Implementation  Now that we have a final design and a clear picture of what the client wants, we can begin building the actual Website. The implementation phase consists of coding the required functionality of the Website, and implementing the design we came up with in Phase 2.  After this phase is complete, the Website comes to life and you can start using its features. This is the most time consuming phase of our time working together, so it may be some time before you hear back from us depending on your project size.   Phase 4: Feedback  Now that Website is ready, we want to hear your final feedback about it. If there’s anything that needs changing, we will make some last minute tweaks** to it before the Website goes ‘live’ for your company / customers/ organisation to use.   Phase 5: Launch &amp; Training  The new Website is now ready to be shown to the world! In the Launch &amp; Training phase, the website is made live for customers to see. Training is available to learn how to use the new Website. E.g. if we build you a Website which is built on a content management system, we will provide you with a short guide on how to use the system. This will allow you to update the Website’s content without knowledge of web coding.      Please ask us about our client satisfaction policy.   Software glitches (also known as bugs) may arise during the implementation phase. This can sometimes take more than just a few minutes to fix, but completely depends on the project. Please ask us about this.  ","categories": [],
        "tags": [],
        "url": "https://keepaliveit.co.uk/planning/cloud-migration-checklist",
        "teaser":null},{
        "title": "Keep Alive I.T’s 5 Phase Website Development Process",
        "excerpt":"Creating a new website may seem like an extremely stressful task for some people but proper planning will ensure that the process goes as smoothly as possible for all parties involved. That’s why we’ve created this Website Development Process to help describe the different stages of the development process and to understand how our working relationship is effective.   Phase 1: Knowledge &amp; Requirements Gathering  During the Knowledge &amp; Requirements Gathering phase, the customer (you), and the developer (us) will discuss the mission &amp; Unique Selling Point (USP) of your business or organisation. This will help both parties identify the customer needs and create a vision of what the customer hopes to achieve with their new Website. We’ll ask you some detailed questions about what your Website needs to do during this phase so that we have all the information we need to know. This will usually involve having a meeting in person - but don’t worry about this! We’ll throw some ideas at you if you get stuck during the meeting and it won’t be formal in any way.   ##Phase 2: Layout &amp; Design Once the developer has a better understanding of the business or organisation’s requirements, the design work begins. Based on the information provided by the customer in Phase 1, the designer will create a design and send it to you for review. The design is worked on until you are 100% satisfied* and love the way it looks. Once we’re given the go ahead with our design, we’re ready to move onto Phase 3, which is the Implementation phase.   Phase 3: Implementation  Now that we have a final design and a clear picture of what the client wants, we can begin building the actual Website. The implementation phase consists of coding the required functionality of the Website, and implementing the design we came up with in Phase 2.  After this phase is complete, the Website comes to life and you can start using its features. This is the most time consuming phase of our time working together, so it may be some time before you hear back from us depending on your project size.   Phase 4: Feedback  Now that Website is ready, we want to hear your final feedback about it. If there’s anything that needs changing, we will make some last minute tweaks** to it before the Website goes ‘live’ for your company / customers/ organisation to use.   Phase 5: Launch &amp; Training  The new Website is now ready to be shown to the world! In the Launch &amp; Training phase, the website is made live for customers to see. Training is available to learn how to use the new Website. E.g. if we build you a Website which is built on a content management system, we will provide you with a short guide on how to use the system. This will allow you to update the Website’s content without knowledge of web coding.      Please ask us about our client satisfaction policy.   Software glitches (also known as bugs) may arise during the implementation phase. This can sometimes take more than just a few minutes to fix, but completely depends on the project. Please ask us about this.  ","categories": [],
        "tags": [],
        "url": "https://keepaliveit.co.uk/planning/website-development-checklist",
        "teaser":null},{
        "title": "Our new website is finally Live! Now for a brief introduction to the company...",
        "excerpt":"Hello World, we're Keep-Alive I.T Services and we are (A)LIVE!   ^^ See what I did there ^^   Hello World!  Well, It’s a great honour for me to be able to write the very first official blog post for the Keep-Alive I.T Services website - after months of careful &amp; detailed planning, writing, and testing; Alongside working a full-time day job to be able to fund establishing this new company, Keep-Alive I.T Services.   Who is ‘me’? Good question. My name is Joel Murphy and I am the founder of Keep-Alive I.T Services. I’ll be taking on the role of ‘Lead Consultant’ here within the company, whereby I’ll be working with clients to help them make strategic decisions to implement suitable technologies for their I.T related needs. I’ll also be  working on a significant amount of implementations for clients, in addition to working towards leading the company in a positive direction for the future. I forecast this to become somewhat of a hectic role as it has has kept me extremely occupied so far, and I honestly can’t wait to see what challenges it brings in the next coming months and years as I get to share my I.T expertise with the World.   I’d like to take the time to write a brief introduction to Keep-Alive I.T explaining this new venture, our mission statement, and what the company hopes to bring myself and future clients in the medium-to-long term.   Reasons for founding Keep-Alive I.T  I founded Keep-Alive I.T because I’ve worked in a range of different environments and seen some of the good and bad sides to different technology implementations at different organisations in both, Windows and Linux Operating System environments. Sure, not everyone gets things right first time but when you’re constantly seeing newbies (or people who think they’re experienced with something - when in reality they have absolutely no clue about) implementing old, dying technologies at a company just because they have a senior status without any redundancy or intention of scale, it makes you wonder if there’s any hope at all for running reliable systems in production. When you’re an employee at an organisation, you sort of learn to shut your mouth and go with whatever solution you’re told to work towards. Consulting on the other hand is a great opportunity to make use of the expert skills you’ve acquired after so many years working with different technologies and seeing them grow over time. With this in mind, it has motivated me to start a company consulting clients on Development and operations  As someone who keeps up to date with the latest and greatest technolgies, focuses on best practises, and practises development and operational I.T procedures; I see myself as a strong candidate for ‘bridging the gap’ between business and I.T workers and help break down complex technical problems into a language that others can easily understand.   How I came up with the company name  If you’re a techy at heart, you may be aware of the HTTP Keep-Alive Header which is present in most modern web-browsers.      Keep alive is a method to allow the same tcp connection for HTTP conversation instead of opening a new one with each new request. More simply put, it is a communication between the web server and the web browser that says “you can grab more than just one file at a time”    Development and Operations support   I.T Procurement   ","categories": ["news"],
        "tags": [],
        "url": "https://keepaliveit.co.uk/news/keep-alive-it-introduction/",
        "teaser":null},{
        "title": "All services",
        "excerpt":"This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com   You can find the source code for Minima at GitHub: Business / Non-Profit / Consumer   You can find the source code for Jekyll at GitHub: jekyll / jekyll   ","categories": [],
        "tags": [],
        "url": "https://keepaliveit.co.uk/services",
        "teaser":null},{
        "title": "Business Services",
        "excerpt":"How can Keep-Alive I.T’s services benefit my business?  Here at Keep-Alive I.T, our aim is to help businesses thrive ahead of their competitors by taking advantage of secure, effective, and intuitive Digital Technology Solutions.  We know how frustrating it can be when companies use jargon-filled or cryptic text on their webpages (and they do this just because they can!). The purpose of this page is to keep things simple for you, and give you some guidance on exactly what digital services Keep Alive I.T can offer you to generate more sales for your business. We promise we won’t confuse you with any hard to understand terminology, so keep reading if you’d like to know more. The only question we need to ask you today, is what is your current involvement with a business? Click on one of the three tab headings below to Access Resource about how your business could benefit from Keep Alive I.T’s services:   We build digital solutions for absolutely any business that needs them, no matter what industry it’s in, or what its employees’ current understanding of technology is.  ","categories": [],
        "tags": [],
        "url": "https://keepaliveit.co.uk/services/business",
        "teaser":null},{
        "title": "All services",
        "excerpt":"Databases   Database Maintenance   Database Data Redundancy   Database Security Audit   Database encryption   ","categories": [],
        "tags": [],
        "url": "https://keepaliveit.co.uk/services/business/database-management",
        "teaser":null},{
        "title": "Consumer Services",
        "excerpt":"This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com   You can find the source code for Minima at GitHub: jekyll / minima   You can find the source code for Jekyll at GitHub: jekyll / jekyll   ","categories": [],
        "tags": [],
        "url": "https://keepaliveit.co.uk/services/consumer",
        "teaser":null},{
        "title": "Non-Profit Business Services",
        "excerpt":"This is the base Jekyll theme. You can find out more info about customizing your Jekyll theme, as well as basic Jekyll usage documentation at jekyllrb.com   You can find the source code for Minima at GitHub: jekyll / minima   You can find the source code for Jekyll at GitHub: jekyll / jekyll   ","categories": [],
        "tags": [],
        "url": "https://keepaliveit.co.uk/services/non-profit",
        "teaser":null}]
